{"version":3,"sources":["hoc/asyncComponent/asyncComponent.js","App.js","serviceWorker.js","index.js"],"names":["asyncComponent","importComponent","state","component","then","cmp","setState","default","C","this","props","Component","asyncSublinkpage","asyncHome","asyncFilterpage","asyncList","asyncProductPage","asyncCart","asyncHistory","asyncWishlist","App","routes","path","withRouter","exact","to","Boolean","window","location","hostname","match","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAuBeA,EArBQ,SAACC,GACpB,kNACIC,MAAQ,CACJC,UAAW,MAFnB,mFAK0B,IAAD,OACjBF,IACKG,MAAK,SAAAC,GACF,EAAKC,SAAS,CAACH,UAAWE,EAAIE,eAR9C,+BAaQ,IAAMC,EAAIC,KAAKP,MAAMC,UAErB,OAAOK,EAAI,kBAACA,EAAMC,KAAKC,OAAY,SAf3C,GAAqBC,cCEnBC,EAAmBZ,GAAe,WACtC,OAAO,+DAEHa,EAAYb,GAAe,WAC/B,OAAO,8DAEHc,EAAkBd,GAAe,WACrC,OAAO,+DAEHe,EAAYf,GAAe,WAC/B,OAAO,+DAEHgB,EAAmBhB,GAAe,WACtC,OAAO,+DAEHiB,EAAYjB,GAAe,WAC/B,OAAO,+DAEHkB,EAAelB,GAAe,WAClC,OAAO,+DAEHmB,EAAgBnB,GAAe,WACnC,OAAO,+DAEHoB,E,iLAEF,IAAIC,EACF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWnB,UAAWoB,YAAWP,KAC7C,kBAAC,IAAD,CAAOM,KAAK,QAAQnB,UAAWY,IAC/B,kBAAC,IAAD,CAAOO,KAAK,UAAUE,OAAK,EAACrB,UAAWW,IACvC,kBAAC,IAAD,CAAOQ,KAAK,QAAQE,OAAK,EAACrB,UAAWc,IACrC,kBAAC,IAAD,CAAOK,KAAK,YAAYE,OAAK,EAACrB,UAAWgB,IACzC,kBAAC,IAAD,CAAOG,KAAK,eAAeE,OAAK,EAACrB,UAAWS,IAC5C,kBAAC,IAAD,CAAOU,KAAK,WAAWE,OAAK,EAACrB,UAAWe,IACxC,kBAAC,IAAD,CAAOI,KAAK,IAAIE,OAAK,EAACrB,UAAWoB,YAAWV,KAC5C,kBAAC,IAAD,CAAUY,GAAG,OAGjB,OACE,kBAAC,WAAD,KACGJ,O,GAjBSV,aAwBHY,cAAWH,GCzCNM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCFN,IAAMC,EACF,kBAAC,IAAD,KACI,kBAAC,EAAD,OAGRC,IAASC,OAAOF,EAAKG,SAASC,eAAe,SD8GvC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.f627403a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nconst asyncComponent = (importComponent) => {\n    return class extends Component {\n        state = {\n            component: null\n        }\n\n        componentDidMount () {\n            importComponent()\n                .then(cmp => {\n                    this.setState({component: cmp.default});\n                });\n        }\n        \n        render () {\n            const C = this.state.component;\n\n            return C ? <C {...this.props} /> : null;\n        }\n    }\n}\n\nexport default asyncComponent;","import React, { Component, Fragment } from 'react';\nimport './App.css';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport asyncComponent from './hoc/asyncComponent/asyncComponent';\n\nconst asyncSublinkpage = asyncComponent(() => {\n  return import('./containers/Sublinkpage/Sublinkpage')\n})\nconst asyncHome = asyncComponent(() => {\n  return import('./containers/Home/Home');\n});\nconst asyncFilterpage = asyncComponent(() => {\n  return import('./containers/FilterPage/FilterPage');\n});\nconst asyncList = asyncComponent(() => {\n  return import('./containers/List/List');\n});\nconst asyncProductPage = asyncComponent(() => {\n  return import('./containers/ProductPage/ProductPage');\n});\nconst asyncCart = asyncComponent(() => {\n  return import('./containers/Cart/Cart');\n});\nconst asyncHistory = asyncComponent(() => {\n  return import('./containers/History/History');\n});\nconst asyncWishlist = asyncComponent(() => {\n  return import('./containers/Wishlist/Wishlist');\n});\nclass App extends Component {\n  render() {\n    let routes = (\n      <Switch>\n        <Route path=\"/product\" component={withRouter(asyncProductPage)} />\n        <Route path=\"/list\" component={asyncList} />\n        <Route path=\"/filter\" exact component={asyncFilterpage} />\n        <Route path=\"/cart\" exact component={asyncCart} />\n        <Route path=\"/wishlist\" exact component={asyncWishlist} />\n        <Route path=\"/sublinkpage\" exact component={asyncSublinkpage} />\n        <Route path=\"/history\" exact component={asyncHistory} />\n        <Route path=\"/\" exact component={withRouter(asyncHome)} />\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n    return (\n      <Fragment>\n        {routes}\n      </Fragment>\n\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"slick-carousel/slick/slick.css\"; \nimport \"slick-carousel/slick/slick-theme.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nconst app = (\n    <BrowserRouter >\n        <App />\n    </BrowserRouter>\n);\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); \n"],"sourceRoot":""}